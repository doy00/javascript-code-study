// Queue 클래스 사용
class Queue {
    constructor() {
        this.items = {};
        this.headIndex = 0;
        this.tailIndex = 0;
    }
    
    push(item) {
        this.items[this.tailIndex] = item;
        this.tailIndex++;
    }
    
    pop() {
        const item = this.items[this.headIndex];
        delete this.items[this.headIndex];
        this.headIndex++;
        return item;
    }
    
    isEmpty() {
        return this.headIndex === this.tailIndex;
    }
    
    size() {
        return this.tailIndex - this.headIndex;
    }
}

function solution(maps) {
    // 이동할 수 있는 방향을 나타내는 배열
    const move = [[-1, 0], [0, -1], [0, 1], [1, 0]];
    
    // 맵의 크기를 저장
    const n = maps.length;        // 맵의 세로 크기
    const m = maps[0].length;     // 맵의 가로 크기
    
    // 거리를 저장하는 배열 dist를 -1로 초기화
    const dist = Array.from({ length: n}, () => Array(m).fill(-1));
    
    // BFS 함수
    function bfs(start) {
        // queue를 선언학 시작 위치를 queue에 추가
        const q = new Queue()
        q.push(start);
        dist[start[0]][start[1]] = 1;
        
        // queue가 빌때까지 반복
        while (!q.isEmpty()) {
            const here = q.pop();
            
            // 현재 위치에서 이동할 수 있는 모든 방향
            for (const [dx, dy] of move) {
                const row = here[0] + dx;
                const column = here[1] + dy;
                
                // 이동한 이ㅜ치가 범위를 벗어난 경우 다음 방향으로 넘어감
                if (row < 0 || row >= n || column < 0 || column >= m) {
                    continue;
                }
                // 이동한 위치에 벽이 있는 경우 다음 방향으로 넘어감
                if (maps[row][column] === 0) {
                    continue;
                }
                
                // 이동한 위치가 처음 방문하는 경우, queue에 추가하고 거리 갱신
                if (dist[row][column] === -1) {
                    q.push([row, column]);
                    dist[row][column] = dist[here[0]][here[1]] + 1;
                }
            }
        }
        return dist;
    }
    // 시작 위치에서 bfs() 함수를 호출하여 거리 계산
    bfs([0, 0]);
    
    // 목적지까지의 거리 반환, 목적지에 도달하지 못한 경우 -1을 반환
    return dist[n - 1][m - 1];
}
